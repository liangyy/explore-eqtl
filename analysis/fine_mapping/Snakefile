# this module perform fine-mapping on a list of candidate genes (by ENST ID)
# steps:
# X:
# 1. obtain snps for each gene (gene-snp-map)
# 2. obtain genotype of each gene (tissue-specific)
# Y:
# 1. obtain gene expression for each gene (tissue-specific)
# Z:
# 1. obtain covariate for each gene (tissue-specific)


rule get_gene_snp:
    input:
        config['gene-snp-map'],
        config['gene-list']
    output:
        'output/{task_name}/gene_snp_map.txt.gz'
    run:
        import os
        import gzip
        import subprocess, signal

        f = open(input[1], 'r')
        gene_vec = []
        for i in f:
            i = i.strip()
            if i == '':
                continue
            gene_vec.append('^' + i)
        f.close()
        gene_str = '\n'.join(gene_vec)
        patternfile = '{prefix}.pattern'.format(prefix = output[0])
        pf = open(patternfile, 'w')
        pf.write(gene_str + '\n')
        pf.close()
        cmd2 = 'zcat < {inp} | egrep -f {pattern} > {outfile}.tmp'.format(inp = input[0], outfile = output[0], pattern = patternfile)
        subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
        print(i)
        cmd3 = 'cat {outfile}.tmp | gzip > {outfile} ; rm {outfile}.tmp ; rm {pattern}'.format(outfile = output[0], pattern = patternfile)
        # print(cmd3)
        os.system(cmd3)

rule get_genotype:
    # one individual per column
    # with header (individual ID)
    # one SNP per row
    # first column: SNP ID
    input:
        lambda wildcards: config['tissue'][wildcards.tissue]['genotype'],
        'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/genotype/'
    run:
        import os
        import gzip
        import pandas
        import io
        import subprocess, signal
        with gzip.open(input[1], 'rt') as f:
            for i in f:
                i = i.strip()
                i = i.split(',')
                outfile = '{prefix}/{name}.txt.gz'.format(prefix = output[0], name = i[0])
                patternfile = '{prefix}/{name}.pattern'.format(prefix = output[0], name = i[0])
                i = i[1 : ]  # remove gene id
                snp_str = '^\n'.join(i)
                snp_str = '^' + snp_str
                pf = open(patternfile, 'w')
                pf.write(snp_str + '\n')
                pf.close()
                cmd1 = 'zcat < {inp} | head -n 1 > {outfile}.tmp'.format(inp = input[0], outfile = outfile)
                i = subprocess.Popen(cmd1, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
                # print('i = ', i)
                cmd2 = "zcat < {inp} | egrep -f {pattern} >> {outfile}.tmp".format(inp = input[0], outfile = outfile, pattern = patternfile)
                j = subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
                # print('j = ', j)
                cmd3 = 'cat {outfile}.tmp | gzip > {outfile}; rm {outfile}.tmp ; rm {pattern}'.format(outfile = outfile, pattern = patternfile)
                k = subprocess.Popen(cmd3, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
                # print(k)

rule get_expression:
    # one individual per column
    # with header (individual ID)
    # first column: gene ID
    input:
        lambda wildcards: config['tissue'][wildcards.tissue]['gene-expression'],
        'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/gene_expression/'
    run:
        import os
        import gzip
        import pandas
        import io
        import subprocess, signal
        with gzip.open(input[1], 'rt') as f:
            for i in f:
                i = i.strip()
                i = i.split(',')
                outfile = '{prefix}/{name}.txt.gz'.format(prefix = output[0], name = i[0])
                cmd1 = 'zcat < {inp} | head -n 1 > {outfile}.tmp'.format(inp = input[0], outfile = outfile)
                subprocess.Popen(cmd1, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
                cmd2 = 'zcat < {inp} | grep "^{gene}" >> {outfile}.tmp'.format(inp = input[0], gene = i[0], outfile = outfile)
                subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()
                cmd3 = 'cat {outfile}.tmp | gzip > {outfile}; rm {outfile}.tmp'.format(outfile = outfile)
                subprocess.Popen(cmd3, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL).wait()

# rule get_covariate:
    # one individual per column
    # with header (individual ID)
    # one covariate per row
    # first column: covariate ID

rule fine_mapping:
    input:
        x = 'output/{task_name}/{tissue}/genotype/',
        y = 'output/{task_name}/{tissue}/gene_expression/',
        z = lambda wildcards: config['tissue'][wildcards.tissue]['covariate'],
        gene = 'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/fine-map__{wrapper}/'
    params:
        lambda wildcards: config['fine-mapping-wrapper'][wildcards.wrapper]
    shell:
        '''
        STR=$(zcat {input.gene} | awk -F"," '{{print $1}}' | tr '\\n' ',')
        Rscript scripts/fine_mapping_wrapper.R \
            --func {params[0]} \
            --x {input.x} \
            --y {input.y} \
            --z {input.z} \
            --gene_list $STR \
            --out_dir {output[0]}
        '''

def all_map(config):
    out =  [ 'output/{task_name}/{tissue}/fine-map__{wrapper}/'.format(task_name = config['task-name'], tissue = i, wrapper = j) for i in list(config['tissue'].keys()) for j in list(config['fine-mapping-wrapper'].keys()) ]
    # print(out)
    return out

rule all_map:
    input:
        all_map(config)
        # [ 'output/{task_name}/{tissue}/fine-map__{wrapper}/'.format(task_name = config['task-name'], tissue = i, wrapper = j) for i in list(config['tissue'].keys()) for j in list(config['fine-mapping-wrapper'].keys()) ]
