# this module perform fine-mapping on a list of candidate genes (by ENST ID)
# steps:
# X:
# 1. obtain snps for each gene (gene-snp-map)
# 2. obtain genotype of each gene (tissue-specific)
# Y:
# 1. obtain gene expression for each gene (tissue-specific)
# Z:
# 1. obtain covariate for each gene (tissue-specific)

# Fine map and output R object
def all_map(config):
    out =  [ 'output/{task_name}/{tissue}/fine-map__{wrapper}/'.format(task_name = config['task-name'], tissue = i, wrapper = j) for i in list(config['tissue'].keys()) for j in list(config['fine-mapping-wrapper'].keys()) ]
    # print(out)
    return out

rule all_map:
    input:
        all_map(config)

# END

# Report PIP in HTML
rule all_report:
    input:
        [ 'output/{task_name}/report/{wrapper}.html'.format(task_name = config['task-name'], wrapper = j) for i in list(config['tissue'].keys()) for j in list(config['fine-mapping-wrapper'].keys()) ]

rule get_gene_snp:
    input:
        config['gene-snp-map'],
        config['gene-list']
    output:
        'output/{task_name}/gene_snp_map.txt.gz'
    run:
        import os
        import gzip
        import subprocess, signal

        f = open(input[1], 'r')
        gene_vec = []
        for i in f:
            i = i.strip()
            if i == '':
                continue
            gene_vec.append('^' + i)
        f.close()
        gene_str = '\n'.join(gene_vec)
        patternfile = '{prefix}.pattern'.format(prefix = output[0])
        pf = open(patternfile, 'w')
        pf.write(gene_str + '\n')
        pf.close()
        cmd2 = 'zcat < {inp} | egrep -f {pattern} > {outfile}.tmp'.format(inp = input[0], outfile = output[0], pattern = patternfile)
        subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
        print(i)
        cmd3 = 'cat {outfile}.tmp | gzip > {outfile} ; rm {outfile}.tmp ; rm {pattern}'.format(outfile = output[0], pattern = patternfile)
        # print(cmd3)
        os.system(cmd3)

rule get_genotype:
    # one individual per column
    # with header (individual ID)
    # one SNP per row
    # first column: SNP ID
    input:
        lambda wildcards: config['tissue'][wildcards.tissue]['genotype'],
        'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/genotype/'
    run:
        import os
        import gzip
        import pandas
        import io
        import subprocess, signal
        with gzip.open(input[1], 'rt') as f:
            for i in f:
                i = i.strip()
                i = i.split(',')
                outfile = '{prefix}/{name}.txt.gz'.format(prefix = output[0], name = i[0])
                patternfile = '{prefix}/{name}.pattern'.format(prefix = output[0], name = i[0])
                i = i[1 : ]  # remove gene id
                snp_str = '\n^'.join(i)
                snp_str = '^' + snp_str
                pf = open(patternfile, 'w')
                pf.write(snp_str + '\n')
                pf.close()
                cmd1 = 'zcat < {inp} | head -n 1 > {outfile}.tmp'.format(inp = input[0], outfile = outfile)
                i = subprocess.Popen(cmd1, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
                # print('i = ', i)
                cmd2 = "zcat < {inp} | egrep -f {pattern} >> {outfile}.tmp".format(inp = input[0], outfile = outfile, pattern = patternfile)
                j = subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
                # print('j = ', j)
                cmd3 = 'cat {outfile}.tmp | gzip > {outfile}; rm {outfile}.tmp ; rm {pattern}'.format(outfile = outfile, pattern = patternfile)
                k = subprocess.Popen(cmd3, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
                # print(k)

rule get_expression:
    # one individual per column
    # with header (individual ID)
    # first column: gene ID
    input:
        lambda wildcards: config['tissue'][wildcards.tissue]['gene-expression'],
        'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/gene_expression/'
    run:
        import os
        import gzip
        import pandas
        import io
        import subprocess, signal
        with gzip.open(input[1], 'rt') as f:
            for i in f:
                i = i.strip()
                i = i.split(',')
                outfile = '{prefix}/{name}.txt.gz'.format(prefix = output[0], name = i[0])
                cmd1 = 'zcat < {inp} | head -n 1 > {outfile}.tmp'.format(inp = input[0], outfile = outfile)
                subprocess.Popen(cmd1, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
                cmd2 = 'zcat < {inp} | grep "^{gene}" >> {outfile}.tmp'.format(inp = input[0], gene = i[0], outfile = outfile)
                subprocess.Popen(cmd2, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()
                cmd3 = 'cat {outfile}.tmp | gzip > {outfile}; rm {outfile}.tmp'.format(outfile = outfile)
                subprocess.Popen(cmd3, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, preexec_fn = lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL)).wait()

# rule get_covariate:
    # one individual per column
    # with header (individual ID)
    # one covariate per row
    # first column: covariate ID

rule fine_mapping:
    input:
        x = 'output/{task_name}/{tissue}/genotype/',
        y = 'output/{task_name}/{tissue}/gene_expression/',
        z = lambda wildcards: config['tissue'][wildcards.tissue]['covariate'],
        gene = 'output/{task_name}/gene_snp_map.txt.gz'
    output:
        'output/{task_name}/{tissue}/fine-map__{wrapper}/'
    params:
        lambda wildcards: config['fine-mapping-wrapper'][wildcards.wrapper]
    log:
        'output/{task_name}/{tissue}/fine-map__{wrapper}.log'
    shell:
        '''
        STR=$(zcat {input.gene} | awk -F"," '{{print $1}}' | tr '\\n' ',')
        Rscript scripts/fine_mapping_wrapper.R \
            --func {params[0]} \
            --x {input.x} \
            --y {input.y} \
            --z {input.z} \
            --gene_list $STR \
            --out_dir {output[0]} > {log}
        '''

rule report_rmd:
    input:
        rds = [ 'output/{{task_name}}/{tissue}/fine-map__{{wrapper}}/'.format(tissue = i) for i in list(config['tissue'].keys()) ],
        l = config['highlight-snp']
    params:
        ','.join([ 'output/{{task_name}}/{tissue}/fine-map__{{wrapper}}/'.format(tissue = i) for i in list(config['tissue'].keys()) ])
    output:
        temp('output/{task_name}/report/{wrapper}.Rmd')
    run:
        rmd = '''---
title: "Report for fine-mapping ({map}) result in {task_name}"
output:
  html_document:
    number_sections: true
    toc: true
    toc_float: true
    theme: cosmo
    highlight: textmate
---

```{{r setup, include=FALSE}}
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(pander)
library(plotly)
library(ggplot2)
panderOptions('knitr.auto.asis', FALSE)
panderOptions('table.split.table', Inf)
```

# Setup

```{{r}}
print(paste0('../../../', '{highlight_snp}'))
if('{highlight_snp}' != '') {{
  highlight.snp.df <- read.table(paste0('../../../', '{highlight_snp}'), header = T)
}} else {{
  highlight.snp.df <- NULL
}}
rds.dirs <- strsplit('{rds_dir_str}', ',')[[1]]
```

```{{r, results='asis'}}
output <- list()
for(rds.dir in rds.dirs) {{
  tissue <- basename(dirname(rds.dir))
  cat('#', tissue, '\n', '\n')
  rdss <- Sys.glob(paste0('../../../', rds.dir, '/', '*.rds'))
  for(rds in rdss) {{
    gene <- sub('.rds', '', basename(rds), fixed = T)
    cat('##', gene, '\n', '\n')
    out <- readRDS(rds)
    cs <- susieR::susie_get_CS(out$fitted, t(data.matrix(out$X[, -ncol(out$X)])), coverage = .95)

    # output[[length(output) + 1]] <- paste0(capture.output(pander(cs$purity)), collapse = '\\n')
    pander(cs$purity)

    pip <- susieR::susie_get_PIP(out$fitted, cs$cs_index)
    coordinate <- as.numeric(str_match(out$X$SNP_ID, '[0-9]+_([0-9]+)_[A-Za-z]+_[A-Za-z]+_[A-Za-z0-9]+')[, 2])
    df <- data.frame(coordinate = coordinate, pip = pip)
    df$cs <- -1
    if(length(cs$cs_index) != 0) {{
      for(i in 1 : length(cs$cs_index)) {{
        df$cs[cs$cs[[i]]] <- cs$cs_index[i]
      }}
    }}
    p <- ggplot(df) + geom_point(aes(x = coordinate, y = pip, color = cs))
    p <- p + ggtitle('PIP (red line: leadingSNP; blue line: candidateSNP)')
    if(!is.null(highlight.snp.df)) {{
      highlight.snp <- highlight.snp.df[highlight.snp.df$ensembl_gene_id == str_match(gene, '([A-Za-z0-9]+).[A-Za-z0-9]+')[, 2] & highlight.snp.df$tissue == tissue, ]
      leading.snp <- as.numeric(str_match(highlight.snp$leading_eqtl[1], '[0-9]+_([0-9]+)_[A-Za-z]+_[A-Za-z]+_[A-Za-z0-9]+')[, 2])
      candidate.snp <- unique(as.numeric(str_match(highlight.snp$motif_snp, '[0-9]+_([0-9]+)_[A-Za-z]+_[A-Za-z]+_[A-Za-z0-9]+')[, 2]))
      p <- p + geom_vline(xintercept = candidate.snp, color = 'blue')
    }}
    p <- p + geom_vline(xintercept = leading.snp, color = 'red')
    x <- as.widget(ggplotly(p))
    output[[length(output) + 1]] <- x
    cat(renderTags(x)$html)
    cat('\n', '\n')
  }}
}}

```

```{{r echo=FALSE, messages=FALSE, warning=FALSE}}
# attach the Dependencies
# since the do not get included with renderTags(...)$html
deps <- lapply(
  Filter(function(x){inherits(x,"htmlwidget")},output),
  function(hw){{
    renderTags(hw)$dependencies
  }}
)

attachDependencies(
  tagList(),
  unlist(deps,recursive=FALSE)
)
```
'''.format(map = wildcards.wrapper, task_name = wildcards.task_name, highlight_snp = input.l, rds_dir_str = params[0])
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule report_html:
    input:
        files = [ 'output/{{task_name}}/{tissue}/fine-map__{{wrapper}}/'.format(tissue = i) for i in list(config['tissue'].keys()) ],
        h = config['highlight-snp'],
        rmd = 'output/{task_name}/report/{wrapper}.Rmd'
    output:
        'output/{task_name}/report/{wrapper}.html'
    shell:
        '''
        Rscript -e "rmarkdown::render('{input.rmd}')"
        '''
